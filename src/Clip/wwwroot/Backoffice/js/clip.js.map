{"version":3,"names":[],"mappings":"","sources":["clip.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EntityType = void 0;\r\nconst _module_1 = require(\"./components/_module\");\r\nconst _module_2 = require(\"./services/_module\");\r\nconst name = 'clip';\r\nangular.module(name, [\r\n    _module_2.ServicesModule,\r\n    _module_1.ComponentsModule,\r\n]);\r\nangular.module('umbraco').requires.push(name);\r\nvar EntityType;\r\n(function (EntityType) {\r\n    EntityType[\"DocumentType\"] = \"document-type\";\r\n    EntityType[\"MediaType\"] = \"media-type\";\r\n})(EntityType = exports.EntityType || (exports.EntityType = {}));\r\n\n},{\"./components/_module\":2,\"./services/_module\":6}],2:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ComponentsModule = void 0;\r\nconst overview_controller_1 = require(\"./overview.controller\");\r\nconst overview_component_1 = require(\"./overview.component\");\r\nconst type_limits_table_component_1 = require(\"./type-limits-table.component\");\r\nexports.ComponentsModule = angular\r\n    .module('clip.components', [])\r\n    .controller(overview_controller_1.OverviewController.controllerName, overview_controller_1.OverviewController)\r\n    .component(overview_component_1.OverviewComponent.name, overview_component_1.OverviewComponent)\r\n    .component(type_limits_table_component_1.TypeLimitsTableComponent.name, type_limits_table_component_1.TypeLimitsTableComponent)\r\n    .name;\r\n\n},{\"./overview.component\":3,\"./overview.controller\":4,\"./type-limits-table.component\":5}],3:[function(require,module,exports){\n\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OverviewComponent = void 0;\r\nconst clip_1 = require(\"../clip\");\r\nclass Overview {\r\n    constructor($q, clipService, mediaTypeResource, userGroupsResource, contentTypeResource, editorService) {\r\n        this.$q = $q;\r\n        this.clipService = clipService;\r\n        this.mediaTypeResource = mediaTypeResource;\r\n        this.userGroupsResource = userGroupsResource;\r\n        this.contentTypeResource = contentTypeResource;\r\n        this.groups = [];\r\n        this.contentTypes = [];\r\n        this.mediaTypes = [];\r\n        this.documentTypeKey = 'A2CB7800-F571-4787-9638-BC48539A0EFB';\r\n        this.mediaTypeKey = '4EA4382B-2F5A-4C2B-9587-AE9B3CF3602E';\r\n        this.filterCssClass = 'not-allowed not-published';\r\n        this.$onInit = () => __awaiter(this, void 0, void 0, function* () {\r\n            const promises = [\r\n                this.contentTypeResource.getAll(),\r\n                this.mediaTypeResource.getAll(),\r\n                this.clipService.get(),\r\n                this.userGroupsResource.getUserGroups({ onlyCurrentUserGroups: false }), ,\r\n            ];\r\n            [this.contentTypes, this.mediaTypes, this.config, this.groups] = yield this.$q.all(promises);\r\n            this.config.groups.forEach(g => this.populateSyncModel(g));\r\n            this.config.contentTypeCounts.forEach(c => this.populateCountModel(c));\r\n        });\r\n        this.getTypeByUdi = (udi) => {\r\n            const type = this.contentTypes.find(x => x.udi === udi.uriValue) || this.mediaTypes.find(x => x.udi === udi.uriValue);\r\n            return type;\r\n        };\r\n        this.populateCountModel = (c) => {\r\n            const type = this.getTypeByUdi(c.udi);\r\n            if (!type)\r\n                return;\r\n            c.icon = type.icon;\r\n            c.name = type.name;\r\n        };\r\n        this.populateSyncModel = (g) => {\r\n            if (!g.groupId)\r\n                return;\r\n            const group = this.groups.find(x => x.id == g.groupId);\r\n            if (!group)\r\n                return;\r\n            g.icon = group === null || group === void 0 ? void 0 : group.icon;\r\n            g.groupName = group === null || group === void 0 ? void 0 : group.name;\r\n            let contentTypeSyncModel = [];\r\n            g.udis.forEach(udi => {\r\n                const type = this.getTypeByUdi(udi);\r\n                if (!type)\r\n                    return;\r\n                contentTypeSyncModel.push(type);\r\n            });\r\n            this.syncModel[g.groupId] = contentTypeSyncModel;\r\n        };\r\n        this.removeGroup = index => {\r\n            const g = this.config.groups[index];\r\n            delete this.contentTypeResource[g.groupId];\r\n            this.config.groups.splice(index, 1);\r\n        };\r\n        this.addGroup = () => {\r\n            const groupPickerOptions = {\r\n                submit: model => {\r\n                    model.selection.forEach(s => {\r\n                        const idx = this.config.groups.findIndex(x => x.groupId == s.id);\r\n                        if (idx !== -1)\r\n                            return;\r\n                        this.config.groups.push({\r\n                            icon: s.icon,\r\n                            groupId: s.id,\r\n                            groupName: s.name,\r\n                            udis: [],\r\n                        });\r\n                    });\r\n                    this.editorService.close();\r\n                },\r\n                close: () => this.editorService.close()\r\n            };\r\n            this.editorService.userGroupPicker(groupPickerOptions);\r\n        };\r\n        this.editorService = editorService;\r\n    }\r\n    getIcon(type) {\r\n        var _a;\r\n        type.icon = (_a = (type.udi.includes(clip_1.EntityType.DocumentType) ? this.contentTypes : this.mediaTypes)\r\n            .find(t => t.udi === type.udi)) === null || _a === void 0 ? void 0 : _a.icon;\r\n    }\r\n    addType(groupId, type) {\r\n        const typePickerOptions = {\r\n            multiPicker: true,\r\n            filterCssClass: this.filterCssClass,\r\n            filter: item => item.nodeType === 'container' || item.metaData.isElement || (this.syncModel[groupId] || [])\r\n                .some(x => x.id == item.id),\r\n            submit: model => {\r\n                const valueArray = this.syncModel[groupId] || [];\r\n                model.selection.forEach(value => {\r\n                    this.getIcon(value);\r\n                    valueArray.push(value);\r\n                });\r\n                this.syncModel[groupId] = valueArray;\r\n                this.editorService.close();\r\n            },\r\n            close: () => this.editorService.close()\r\n        };\r\n        this.openPicker(type, typePickerOptions);\r\n    }\r\n    removeType(type, groupId) {\r\n        const idx = this.syncModel[groupId].findIndex(x => x.udi === type.udi.udiValue);\r\n        this.syncModel[groupId].splice(idx, 1);\r\n    }\r\n    openPicker(type, options) {\r\n        if (type === clip_1.EntityType.DocumentType) {\r\n            this.editorService.contentTypePicker(options);\r\n        }\r\n        else {\r\n            this.editorService.mediaTypePicker(options);\r\n        }\r\n    }\r\n}\r\nconst template = `\r\n<div class=\"umb-editor-sub-header justify-start items-center mb0\">\r\n    <h5>\r\n        <localize key=\"clip_userGroupRules\">User group rules</localize>\r\n    </h5>\r\n    <umb-button type=\"button\"\r\n                button-style=\"outline\"\r\n                class=\"ml2\"\r\n                state=\"init\"\r\n                action=\"$ctrl.addGroup()\"\r\n                label-key=\"general_add\">\r\n    </umb-button>\r\n</div>\r\n\r\n<div class=\"umb-table\" ng-if=\"$ctrl.config.groups.length\">\r\n    <div class=\"umb-table-head\">\r\n        <div class=\"umb-table-row\">\r\n            <div class=\"umb-table-cell\">\r\n\r\n            </div>\r\n            <div class=\"umb-table-cell\">\r\n                <localize key=\"user_userGroup\">User group</localize>\r\n            </div>\r\n            <div class=\"umb-table-cell\">\r\n                <localize key=\"clip_allowedDocumentTypes\">Allowed document types</localize>\r\n            </div>\r\n            <div class=\"umb-table-cell\">\r\n                <localize key=\"clip_allowedMediaTypes\">Allowed media types</localize>\r\n            </div>\r\n            <div class=\"umb-table-cell umb-table-cell--small\">\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"umb-table-body\">\r\n        <div ng-repeat=\"group in $ctrl.config.groups track by $index\" class=\"umb-table-row\">\r\n            <div class=\"umb-table-cell\">\r\n                <umb-icon icon=\"{{ group.icon }}\" class=\"umb-table-body__icon umb-table-body__fileicon umb-icon\"></umb-icon>\r\n            </div>\r\n            <div class=\"umb-table-cell\">\r\n                <div class=\"umb-table-body__link\">{{ group.groupName }}</div>\r\n            </div>\r\n            <div class=\"umb-table-cell flex-column mt0\">\r\n                <div class=\"mb3\">\r\n                    <umb-node-preview ng-repeat=\"type in $ctrl.syncModel[group.groupId] | filter: {udi: 'document-type'}\"\r\n                                        name=\"type.name\"\r\n                                        icon=\"type.icon\"\r\n                                        sortable=\"false\"\r\n                                        allow-edit=\"false\"\r\n                                        allow-remove=\"true\"\r\n                                        on-remove=\"$ctrl.removeType(type, group.groupId)\">\r\n                    </umb-node-preview>\r\n                </div>\r\n                <button type=\"button\"\r\n                        class=\"umb-node-preview__action ml0 mr0\"\r\n                        ng-click=\"$ctrl.addType(group.groupId, 'document-type')\">\r\n                    <localize key=\"clip_addContentType\">Add document type</localize>\r\n                </button>\r\n            </div>\r\n            <div class=\"umb-table-cell flex-column mt0\">\r\n                <div class=\"mb3\">\r\n                    <umb-node-preview ng-repeat=\"type in $ctrl.syncModel[group.groupId] | filter: {udi: 'media-type'}\"\r\n                                        name=\"type.name\"\r\n                                        icon=\"type.icon\"\r\n                                        sortable=\"false\"\r\n                                        allow-edit=\"false\"\r\n                                        allow-remove=\"true\"\r\n                                        on-remove=\"$ctrl.removeType(type, group.groupId)\">\r\n                    </umb-node-preview>\r\n                </div>\r\n                <button type=\"button\"\r\n                        class=\"umb-node-preview__action ml0 mr0\"\r\n                        ng-click=\"$ctrl.addType(group.groupId, 'media-type')\">\r\n                    <localize key=\"clip_addMediaType\">Add media type</localize>\r\n                </button>\r\n            </div>\r\n            <div class=\"umb-table-cell umb-table-cell--small\">\r\n                <div class=\"umb-node-preview__actions\">\r\n                    <button type=\"button\"\r\n                            class=\"umb-node-preview__action umb-node-preview__action--red\"\r\n                            ng-click=\"$ctrl.removeGroup($index)\">\r\n                        <localize key=\"general_remove\">Remove</localize>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<umb-empty-state ng-if=\"!$ctrl.config.groups.length\">\r\n    <localize key=\"content_listViewNoItems\">There are no items show in the list.</localize>\r\n</umb-empty-state>\r\n\r\n<type-limits-table type=\"document-type\" header-key=\"clip_contentTypeLimits\" type-key=\"clip_contentType\" config=\"$ctrl.config\"></type-limits-table>\r\n<type-limits-table type=\"media-type\" header-key=\"clip_mediaTypeLimits\" type-key=\"clip_mediaType\" config=\"$ctrl.config\"></type-limits-table>`;\r\nexports.OverviewComponent = {\r\n    name: 'clipOverview',\r\n    transclude: true,\r\n    template,\r\n    controller: Overview,\r\n    bindings: {\r\n        config: '=',\r\n        syncModel: '=',\r\n    },\r\n};\r\n\n},{\"../clip\":1}],4:[function(require,module,exports){\n\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OverviewController = void 0;\r\nclass OverviewController {\r\n    constructor(clipService, localizationService) {\r\n        this.clipService = clipService;\r\n        this.localizationService = localizationService;\r\n        this.syncModel = {};\r\n        this.$onInit = () => __awaiter(this, void 0, void 0, function* () {\r\n            this.name = yield this.localizationService.localize('treeHeaders_contentCreationRules');\r\n        });\r\n    }\r\n    save() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let config = {\r\n                groups: [],\r\n                contentTypeCounts: this.config.contentTypeCounts,\r\n            };\r\n            Object.keys(this.syncModel).forEach(k => {\r\n                config.groups.push({\r\n                    groupId: +k,\r\n                    udis: this.syncModel[+k].map(x => x.udi)\r\n                });\r\n            });\r\n            yield this.clipService.save(config);\r\n        });\r\n    }\r\n}\r\nexports.OverviewController = OverviewController;\r\nOverviewController.controllerName = 'Clip.Overview.Controller';\r\n\n},{}],5:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.TypeLimitsTableComponent = void 0;\r\nconst clip_1 = require(\"../clip\");\r\nclass TypeLimitsTable {\r\n    constructor() {\r\n        this._filtered = false;\r\n        this.$doCheck = () => {\r\n            if (this._filtered || !this.config)\r\n                return;\r\n            this.items = this.config.contentTypeCounts.filter(x => x.udi.entityType === this.type);\r\n            this._filtered = true;\r\n        };\r\n        this.addType = () => {\r\n            const typePickerOptions = {\r\n                multiPicker: true,\r\n                filterCssClass: this.parent.filterCssClass,\r\n                filter: item => item.nodeType === 'container' || item.metaData.isElement\r\n                    || this.items.some(x => x.udi.uriValue == item.udi),\r\n                submit: model => {\r\n                    model.selection.forEach(value => {\r\n                        var _a;\r\n                        value.count = (_a = (this.config.existingItemCounts ? this.config.existingItemCounts[value.udi] : 0)) !== null && _a !== void 0 ? _a : 0;\r\n                        value.uniqueId = value.key;\r\n                        value.nodeObjectType = this.type === clip_1.EntityType.DocumentType ? this.parent.documentTypeKey : this.parent.mediaTypeKey;\r\n                        this.parent.getIcon(value);\r\n                        this.items.push(value);\r\n                        this.config.contentTypeCounts.push(value);\r\n                    });\r\n                    this.parent.editorService.close();\r\n                },\r\n                close: () => this.parent.editorService.close()\r\n            };\r\n            this.parent.openPicker(this.type, typePickerOptions);\r\n        };\r\n        this.removeType = (uniqueId) => {\r\n            let idx = this.items.findIndex(x => x.uniqueId === uniqueId);\r\n            this.items.splice(idx, 1);\r\n            idx = this.config.contentTypeCounts.findIndex(x => x.uniqueId === uniqueId);\r\n            this.config.contentTypeCounts.splice(idx, 1);\r\n        };\r\n    }\r\n}\r\nconst template = `\r\n    <div class=\"content-type-counts\">\r\n        <div class=\"umb-editor-sub-header justify-start items-center mb0\">\r\n            <h5>\r\n                <localize key=\"{{ $ctrl.headerKey }}\">Type limits</localize>\r\n            </h5>\r\n            <umb-button type=\"button\"\r\n                        button-style=\"outline\"\r\n                        class=\"ml2\"\r\n                        state=\"init\"\r\n                        action=\"$ctrl.addType()\"\r\n                        label-key=\"general_add\">\r\n            </umb-button>\r\n        </div>\r\n\r\n        <div class=\"umb-table\" ng-if=\"$ctrl.items.length\">\r\n            <div class=\"umb-table-head\">\r\n                <div class=\"umb-table-row\">\r\n                    <div class=\"umb-table-cell\">\r\n\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <localize key=\"{{ $ctrl.typeKey }}\">Type</localize>\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <localize key=\"clip_maxItemsOfType\">Max items of type</localize>\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <localize key=\"clip_currentItemsOfType\">Current items of type</localize>\r\n                    </div>\r\n                    <div class=\"umb-table-cell umb-table-cell--small\">\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"umb-table-body\">\r\n                <div ng-repeat=\"type in $ctrl.items track by $index\" class=\"umb-table-row\">\r\n                    <div class=\"umb-table-cell\">\r\n                        <umb-icon icon=\"{{ type.icon }}\" class=\"umb-table-body__icon umb-table-body__fileicon umb-icon\"></umb-icon>\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <div class=\"umb-table-body__link\">{{ type.name }}</div>\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <input type=\"number\" ng-model=\"type.max\" style=\"margin-bottom:0\" />\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        {{ type.count }}\r\n                    </div>\r\n                    <div class=\"umb-table-cell umb-table-cell--small\">\r\n                        <div class=\"umb-node-preview__actions\">\r\n                            <button type=\"button\"\r\n                                    class=\"umb-node-preview__action umb-node-preview__action--red\"\r\n                                    ng-click=\"$ctrl.removeType(type.uniqueId)\">\r\n                                <localize key=\"general_remove\">Remove</localize>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <umb-empty-state ng-if=\"!$ctrl.items.length\">\r\n            <localize key=\"content_listViewNoItems\">There are no items show in the list.</localize>\r\n        </umb-empty-state>\r\n    </div>`;\r\nexports.TypeLimitsTableComponent = {\r\n    name: 'typeLimitsTable',\r\n    transclude: true,\r\n    require: {\r\n        parent: '^clipOverview',\r\n    },\r\n    bindings: {\r\n        headerKey: '@',\r\n        typeKey: '@',\r\n        type: '@',\r\n        config: '=',\r\n    },\r\n    template,\r\n    controller: TypeLimitsTable\r\n};\r\n\n},{\"../clip\":1}],6:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesModule = void 0;\r\nconst service_1 = require(\"./service\");\r\nexports.ServicesModule = angular\r\n    .module('clip.services', [])\r\n    .factory(service_1.ClipService.serviceName, service_1.ClipService)\r\n    .name;\r\n\n},{\"./service\":7}],7:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ClipService = void 0;\r\nclass ClipService {\r\n    constructor($http, umbRequestHelper) {\r\n        this.$http = $http;\r\n        this.umbRequestHelper = umbRequestHelper;\r\n        this._request = (method, url, data) => {\r\n            url = `${Umbraco.Sys.ServerVariables.Clip.configurationApiBaseUrl}${url}`;\r\n            return this.umbRequestHelper.resourcePromise(method === 'POST' ? this.$http.post(url, data)\r\n                : this.$http.get(url), 'Something broke');\r\n        };\r\n        this.save = (config) => this._request('POST', 'Save', config);\r\n        this.get = () => this._request('GET', 'Get');\r\n    }\r\n}\r\nexports.ClipService = ClipService;\r\nClipService.serviceName = 'clipService';\r\n\n},{}]},{},[1,3,4,5,2,7,6]);\n"],"file":"clip.js"}