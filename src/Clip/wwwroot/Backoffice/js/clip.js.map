{"version":3,"names":[],"mappings":"","sources":["clip.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst _module_1 = require(\"./components/_module\");\r\nconst _module_2 = require(\"./services/_module\");\r\nconst name = 'clip';\r\nangular.module(name, [\r\n    _module_2.ServicesModule,\r\n    _module_1.ComponentsModule,\r\n]);\r\nangular.module('umbraco').requires.push(name);\r\n\n},{\"./components/_module\":2,\"./services/_module\":4}],2:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ComponentsModule = void 0;\r\nconst overview_controller_1 = require(\"./overview.controller\");\r\nexports.ComponentsModule = angular\r\n    .module('clip.components', [])\r\n    .controller(overview_controller_1.OverviewController.controllerName, overview_controller_1.OverviewController)\r\n    .name;\r\n\n},{\"./overview.controller\":3}],3:[function(require,module,exports){\n\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OverviewController = void 0;\r\nclass OverviewController {\r\n    constructor($q, clipService, editorService, localizationService, contentTypeResource, userGroupsResource) {\r\n        this.$q = $q;\r\n        this.clipService = clipService;\r\n        this.editorService = editorService;\r\n        this.localizationService = localizationService;\r\n        this.contentTypeResource = contentTypeResource;\r\n        this.userGroupsResource = userGroupsResource;\r\n        this.groups = [];\r\n        this.allContentTypes = [];\r\n        this.contentTypeSyncModel = {};\r\n        this._filterCssClass = 'not-allowed not-published';\r\n        this.$onInit = () => __awaiter(this, void 0, void 0, function* () {\r\n            const promises = [\r\n                this.contentTypeResource.getAll(),\r\n                this.clipService.get(),\r\n                this.userGroupsResource.getUserGroups({ onlyCurrentUserGroups: false }),\r\n                this.localizationService.localize('treeHeaders_contentCreationRules'),\r\n            ];\r\n            [this.allContentTypes, this.config, this.groups, this.name] = yield this.$q.all(promises);\r\n            this.config.groups.forEach(c => {\r\n                if (!c.groupId)\r\n                    return;\r\n                const group = this.groups.find(g => g.id == c.groupId);\r\n                if (!group)\r\n                    return;\r\n                c.icon = group === null || group === void 0 ? void 0 : group.icon;\r\n                c.groupName = group === null || group === void 0 ? void 0 : group.name;\r\n                let contentTypeSyncModel = [];\r\n                c.contentTypeKeys.forEach(key => {\r\n                    const contentType = this.allContentTypes.find(x => x.key === key);\r\n                    if (!contentType)\r\n                        return;\r\n                    contentTypeSyncModel.push(contentType);\r\n                });\r\n                this.contentTypeSyncModel[c.groupId] = contentTypeSyncModel;\r\n            });\r\n            this.config.contentTypeCounts.forEach(c => {\r\n                const type = this.allContentTypes.find(t => t.key === c.key);\r\n                if (!type)\r\n                    return;\r\n                c.icon = type.icon;\r\n                c.name = type.name;\r\n            });\r\n        });\r\n        this.removeGroup = index => {\r\n            const g = this.config.groups[index];\r\n            delete this.contentTypeResource[g.groupId];\r\n            this.config.groups.splice(index, 1);\r\n        };\r\n        this.addGroup = () => {\r\n            const groupPickerOptions = {\r\n                submit: model => {\r\n                    model.selection.forEach(s => {\r\n                        const idx = this.config.groups.findIndex(x => x.groupId == s.id);\r\n                        if (idx !== -1)\r\n                            return;\r\n                        this.config.groups.push({\r\n                            icon: s.icon,\r\n                            groupId: s.id,\r\n                            groupName: s.name,\r\n                            contentTypeKeys: [],\r\n                        });\r\n                    });\r\n                    this.editorService.close();\r\n                },\r\n                close: () => this.editorService.close()\r\n            };\r\n            this.editorService.userGroupPicker(groupPickerOptions);\r\n        };\r\n    }\r\n    _getContentTypeIcon(type) {\r\n        var _a;\r\n        type.icon = (_a = this.allContentTypes.find(t => t.key === type.key)) === null || _a === void 0 ? void 0 : _a.icon;\r\n    }\r\n    addContentType(groupId) {\r\n        const typePickerOptions = {\r\n            multiPicker: false,\r\n            filterCssClass: this._filterCssClass,\r\n            filter: item => (this.contentTypeSyncModel[groupId] || [])\r\n                .some(x => x.id == item.id),\r\n            submit: model => {\r\n                const valueArray = this.contentTypeSyncModel[groupId] || [];\r\n                const value = model.selection[0];\r\n                this._getContentTypeIcon(value);\r\n                valueArray.push(value);\r\n                this.contentTypeSyncModel[groupId] = valueArray;\r\n                this.editorService.close();\r\n            },\r\n            close: () => this.editorService.close()\r\n        };\r\n        this.editorService.contentTypePicker(typePickerOptions);\r\n    }\r\n    removeContentType(type, groupId) {\r\n        const idx = this.contentTypeSyncModel[groupId].findIndex(x => x.key === type.key);\r\n        this.contentTypeSyncModel[groupId].splice(idx, 1);\r\n    }\r\n    addContentTypeLimit() {\r\n        const typePickerOptions = {\r\n            multiPicker: false,\r\n            filterCssClass: this._filterCssClass,\r\n            filter: item => this.config.contentTypeCounts.some(x => x.id == item.id),\r\n            submit: model => {\r\n                const value = model.selection[0];\r\n                value.count = this.config.existingItemCounts ? this.config.existingItemCounts[value.key] : '';\r\n                this._getContentTypeIcon(value);\r\n                this.config.contentTypeCounts.push(value);\r\n                this.editorService.close();\r\n            },\r\n            close: () => this.editorService.close()\r\n        };\r\n        this.editorService.contentTypePicker(typePickerOptions);\r\n    }\r\n    removeContentTypeCount(type) {\r\n        const idx = this.config.contentTypeCounts.findIndex(x => x.id === type.id);\r\n        this.config.contentTypeCounts.splice(idx, 1);\r\n    }\r\n    save() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let config = {\r\n                groups: [],\r\n                contentTypeCounts: this.config.contentTypeCounts,\r\n            };\r\n            Object.keys(this.contentTypeSyncModel).forEach(k => {\r\n                config.groups.push({\r\n                    groupId: +k,\r\n                    contentTypeKeys: this.contentTypeSyncModel[+k].map(x => x.key)\r\n                });\r\n            });\r\n            yield this.clipService.save(config);\r\n        });\r\n    }\r\n}\r\nexports.OverviewController = OverviewController;\r\nOverviewController.controllerName = 'Clip.Overview.Controller';\r\n\n},{}],4:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ServicesModule = void 0;\r\nconst service_1 = require(\"./service\");\r\nexports.ServicesModule = angular\r\n    .module('clip.services', [])\r\n    .factory(service_1.ClipService.serviceName, service_1.ClipService)\r\n    .name;\r\n\n},{\"./service\":5}],5:[function(require,module,exports){\n\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ClipService = void 0;\r\nclass ClipService {\r\n    constructor($http, umbRequestHelper) {\r\n        this.$http = $http;\r\n        this.umbRequestHelper = umbRequestHelper;\r\n        this._request = (method, url, data) => {\r\n            url = `${Umbraco.Sys.ServerVariables.Clip.configurationApiBaseUrl}${url}`;\r\n            return this.umbRequestHelper.resourcePromise(method === 'POST' ? this.$http.post(url, data)\r\n                : this.$http.get(url), 'Something broke');\r\n        };\r\n        this.save = (config) => this._request('POST', 'Save', config);\r\n        this.get = () => this._request('GET', 'Get');\r\n    }\r\n}\r\nexports.ClipService = ClipService;\r\nClipService.serviceName = 'clipService';\r\n\n},{}]},{},[1,3,2,5,4]);\n"],"file":"clip.js"}