{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Clip/Backoffice/js/clip.ts","src/Clip/Backoffice/js/components/_module.ts","src/Clip/Backoffice/js/components/overview.component.ts","src/Clip/Backoffice/js/components/overview.controller.ts","src/Clip/Backoffice/js/components/type-limits-table.component.ts","src/Clip/Backoffice/js/services/_module.ts","src/Clip/Backoffice/js/services/service.ts"],"names":[],"mappings":"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","file":"clip.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { ComponentsModule } from './components/_module';\r\nimport { ServicesModule } from './services/_module';\r\n\r\nconst name = 'clip';\r\n\r\nangular.module(name, [\r\n    ServicesModule,\r\n    ComponentsModule,\r\n]);\r\n\r\nangular.module('umbraco').requires.push(name);\r\n\r\nexport enum EntityType {\r\n    DocumentType = 'document-type',\r\n    MediaType = 'media-type',\r\n}","import { OverviewController } from './overview.controller';\r\nimport { OverviewComponent } from './overview.component';\r\nimport { TypeLimitsTableComponent } from './type-limits-table.component';\r\n\r\nexport const ComponentsModule = angular\r\n    .module('clip.components', [])\r\n    .controller(OverviewController.controllerName, OverviewController)\r\n    .component(OverviewComponent.name, OverviewComponent)\r\n    .component(TypeLimitsTableComponent.name, TypeLimitsTableComponent)\r\n    .name;","﻿import { EntityType } from \"../clip\";\r\n\r\nclass Overview implements IClipOverview {\r\n\r\n    config!: IClipConfigModel;\r\n    groups: Array<UmbUserGroup> = [];\r\n    contentTypes: Array<UmbContentType> = [];\r\n    mediaTypes: Array<UmbContentType> = [];\r\n    syncModel!: { [key: string]: Array<UmbContentType> };\r\n\r\n    editorService;\r\n     \r\n    documentTypeKey = 'A2CB7800-F571-4787-9638-BC48539A0EFB';\r\n    mediaTypeKey = '4EA4382B-2F5A-4C2B-9587-AE9B3CF3602E';\r\n    filterCssClass = 'not-allowed not-published';\r\n\r\n    constructor(\r\n        private $q,\r\n        private clipService: IClipService,\r\n        private mediaTypeResource,\r\n        private userGroupsResource,\r\n        private contentTypeResource,\r\n        editorService,\r\n    ) {\r\n        this.editorService = editorService;\r\n    }\r\n\r\n    $onInit = async () => {\r\n        const promises = [\r\n            this.contentTypeResource.getAll(),\r\n            this.mediaTypeResource.getAll(),\r\n            this.clipService.get(),\r\n            this.userGroupsResource.getUserGroups({ onlyCurrentUserGroups: false }),,\r\n        ];\r\n\r\n        [this.contentTypes, this.mediaTypes, this.config, this.groups] = await this.$q.all(promises);\r\n\r\n        this.config.groups.forEach(g => this.populateSyncModel(g));\r\n\r\n        this.config.contentTypeCounts.forEach(c => this.populateCountModel(c));\r\n    }\r\n\r\n    private getTypeByUdi = (udi: IUdiModel) => {\r\n        const type = this.contentTypes.find(x => x.udi === udi.uriValue) || this.mediaTypes.find(x => x.udi === udi.uriValue);\r\n        return type;\r\n    }\r\n\r\n    populateCountModel = (c: IClipContentTypeCountModel) => {\r\n        const type = this.getTypeByUdi(c.udi);\r\n        if (!type) return;\r\n\r\n        c.icon = type.icon;\r\n        c.name = type.name;\r\n    }\r\n\r\n    populateSyncModel = (g: IClipGroupConfigModel) => {\r\n        if (!g.groupId) return;\r\n\r\n        const group = this.groups.find(x => x.id == g.groupId);\r\n        if (!group) return;\r\n\r\n        g.icon = group?.icon;\r\n        g.groupName = group?.name;\r\n\r\n        let contentTypeSyncModel: Array<UmbContentType> = [];\r\n\r\n        g.udis.forEach(udi => {\r\n            const type = this.getTypeByUdi(udi);\r\n            if (!type) return;\r\n\r\n            contentTypeSyncModel.push(type);\r\n        });\r\n\r\n        this.syncModel[g.groupId] = contentTypeSyncModel;\r\n    }\r\n\r\n    getIcon(type: { udi: string, [key: string]: any }) {\r\n        type.icon = (type.udi.includes(EntityType.DocumentType) ? this.contentTypes : this.mediaTypes)\r\n            .find(t => t.udi === type.udi)?.icon;\r\n    }\r\n\r\n    removeGroup = index => {\r\n        const g = this.config.groups[index];\r\n        delete this.contentTypeResource[g.groupId];\r\n        this.config.groups.splice(index, 1);\r\n    }\r\n\r\n    addGroup = () => {\r\n        const groupPickerOptions = {\r\n            submit: model => {\r\n                model.selection.forEach(s => {\r\n                    const idx = this.config.groups.findIndex(x => x.groupId == s.id);\r\n                    if (idx !== -1) return;\r\n\r\n                    this.config.groups.push({\r\n                        icon: s.icon,\r\n                        groupId: s.id,\r\n                        groupName: s.name,\r\n                        udis: [],\r\n                    });\r\n                });\r\n\r\n                this.editorService.close();\r\n            },\r\n            close: () => this.editorService.close()\r\n        };\r\n\r\n        this.editorService.userGroupPicker(groupPickerOptions);\r\n    }\r\n\r\n    addType(groupId, type: EntityType) {\r\n        const typePickerOptions = {\r\n            multiPicker: true,\r\n            filterCssClass: this.filterCssClass,\r\n            filter: item =>\r\n                item.nodeType === 'container' || item.metaData.isElement || (this.syncModel[groupId] || [])\r\n                    .some(x => x.id == item.id),\r\n            submit: model => {\r\n                const valueArray = this.syncModel[groupId] || [];\r\n\r\n                model.selection.forEach(value => {\r\n                    this.getIcon(value);\r\n                    valueArray.push(value);\r\n                });\r\n\r\n                this.syncModel[groupId] = valueArray;\r\n                this.editorService.close();\r\n            },\r\n            close: () => this.editorService.close()\r\n        };\r\n\r\n        this.openPicker(type, typePickerOptions);\r\n    }\r\n\r\n    removeType(type, groupId) {\r\n        const idx = this.syncModel[groupId].findIndex(x => x.udi === type.udi.udiValue);\r\n        this.syncModel[groupId].splice(idx, 1);\r\n    }\r\n\r\n    openPicker(type: 'document-type' | 'media-type', options: IClipPickerOptions) {\r\n        if (type === EntityType.DocumentType) {\r\n            this.editorService.contentTypePicker(options);\r\n        } else {\r\n            this.editorService.mediaTypePicker(options);\r\n        }\r\n    }\r\n}\r\n\r\nconst template = `\r\n<div class=\"umb-editor-sub-header justify-start items-center mb0\">\r\n    <h5>\r\n        <localize key=\"clip_userGroupRules\">User group rules</localize>\r\n    </h5>\r\n    <umb-button type=\"button\"\r\n                button-style=\"outline\"\r\n                class=\"ml2\"\r\n                state=\"init\"\r\n                action=\"$ctrl.addGroup()\"\r\n                label-key=\"general_add\">\r\n    </umb-button>\r\n</div>\r\n\r\n<div class=\"umb-table\" ng-if=\"$ctrl.config.groups.length\">\r\n    <div class=\"umb-table-head\">\r\n        <div class=\"umb-table-row\">\r\n            <div class=\"umb-table-cell\">\r\n\r\n            </div>\r\n            <div class=\"umb-table-cell\">\r\n                <localize key=\"user_userGroup\">User group</localize>\r\n            </div>\r\n            <div class=\"umb-table-cell\">\r\n                <localize key=\"clip_allowedDocumentTypes\">Allowed document types</localize>\r\n            </div>\r\n            <div class=\"umb-table-cell\">\r\n                <localize key=\"clip_allowedMediaTypes\">Allowed media types</localize>\r\n            </div>\r\n            <div class=\"umb-table-cell umb-table-cell--small\">\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"umb-table-body\">\r\n        <div ng-repeat=\"group in $ctrl.config.groups track by $index\" class=\"umb-table-row\">\r\n            <div class=\"umb-table-cell\">\r\n                <umb-icon icon=\"{{ group.icon }}\" class=\"umb-table-body__icon umb-table-body__fileicon umb-icon\"></umb-icon>\r\n            </div>\r\n            <div class=\"umb-table-cell\">\r\n                <div class=\"umb-table-body__link\">{{ group.groupName }}</div>\r\n            </div>\r\n            <div class=\"umb-table-cell flex-column mt0\">\r\n                <div class=\"mb3\">\r\n                    <umb-node-preview ng-repeat=\"type in $ctrl.syncModel[group.groupId] | filter: {udi: 'document-type'}\"\r\n                                        name=\"type.name\"\r\n                                        icon=\"type.icon\"\r\n                                        sortable=\"false\"\r\n                                        allow-edit=\"false\"\r\n                                        allow-remove=\"true\"\r\n                                        on-remove=\"$ctrl.removeType(type, group.groupId)\">\r\n                    </umb-node-preview>\r\n                </div>\r\n                <button type=\"button\"\r\n                        class=\"umb-node-preview__action ml0 mr0\"\r\n                        ng-click=\"$ctrl.addType(group.groupId, 'document-type')\">\r\n                    <localize key=\"clip_addContentType\">Add document type</localize>\r\n                </button>\r\n            </div>\r\n            <div class=\"umb-table-cell flex-column mt0\">\r\n                <div class=\"mb3\">\r\n                    <umb-node-preview ng-repeat=\"type in $ctrl.syncModel[group.groupId] | filter: {udi: 'media-type'}\"\r\n                                        name=\"type.name\"\r\n                                        icon=\"type.icon\"\r\n                                        sortable=\"false\"\r\n                                        allow-edit=\"false\"\r\n                                        allow-remove=\"true\"\r\n                                        on-remove=\"$ctrl.removeType(type, group.groupId)\">\r\n                    </umb-node-preview>\r\n                </div>\r\n                <button type=\"button\"\r\n                        class=\"umb-node-preview__action ml0 mr0\"\r\n                        ng-click=\"$ctrl.addType(group.groupId, 'media-type')\">\r\n                    <localize key=\"clip_addMediaType\">Add media type</localize>\r\n                </button>\r\n            </div>\r\n            <div class=\"umb-table-cell umb-table-cell--small\">\r\n                <div class=\"umb-node-preview__actions\">\r\n                    <button type=\"button\"\r\n                            class=\"umb-node-preview__action umb-node-preview__action--red\"\r\n                            ng-click=\"$ctrl.removeGroup($index)\">\r\n                        <localize key=\"general_remove\">Remove</localize>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<umb-empty-state ng-if=\"!$ctrl.config.groups.length\">\r\n    <localize key=\"content_listViewNoItems\">There are no items show in the list.</localize>\r\n</umb-empty-state>\r\n\r\n<type-limits-table type=\"document-type\" header-key=\"clip_contentTypeLimits\" type-key=\"clip_contentType\" config=\"$ctrl.config\"></type-limits-table>\r\n<type-limits-table type=\"media-type\" header-key=\"clip_mediaTypeLimits\" type-key=\"clip_mediaType\" config=\"$ctrl.config\"></type-limits-table>`;\r\n\r\nexport const OverviewComponent = {\r\n    name: 'clipOverview',\r\n    transclude: true,\r\n    template,\r\n    controller: Overview,\r\n    bindings: {\r\n        config: '=',\r\n        syncModel: '=',\r\n    },\r\n}","export class OverviewController {\r\n\r\n    public static controllerName = 'Clip.Overview.Controller';\r\n\r\n    name!: string;\r\n    config!: IClipConfigModel;\r\n    syncModel: { [key: string]: Array<UmbContentType> } = {};\r\n\r\n    constructor(\r\n        private clipService: IClipService,\r\n        private localizationService) {\r\n    }\r\n\r\n    $onInit = async () => {\r\n        this.name = await this.localizationService.localize('treeHeaders_contentCreationRules');        \r\n    }\r\n\r\n    async save() {\r\n        let config: IClipConfigModel = {\r\n            groups: [],\r\n            contentTypeCounts: this.config.contentTypeCounts,\r\n        };\r\n\r\n        Object.keys(this.syncModel).forEach(k => {\r\n            config.groups.push({\r\n                groupId: +k,\r\n                udis: this.syncModel[+k].map(x => x.udi )\r\n            });\r\n        });\r\n\r\n        await this.clipService.save(config);\r\n    }\r\n}\r\n","﻿import { EntityType } from \"../clip\";\r\n\r\nclass TypeLimitsTable {\r\n\r\n    config!: IClipConfigModel;\r\n    items!: Array<IClipContentTypeCountModel>;\r\n    type!: EntityType;\r\n    parent!: IClipOverview;\r\n     \r\n    private _filtered: boolean = false;\r\n\r\n    $doCheck = () => {\r\n        if (this._filtered || !this.config) return;\r\n\r\n        this.items = this.config.contentTypeCounts.filter(x => x.udi.entityType === this.type);\r\n        this._filtered = true;\r\n    }\r\n\r\n    addType = () => {\r\n        const typePickerOptions: IClipPickerOptions = {\r\n            multiPicker: true,\r\n            filterCssClass: this.parent.filterCssClass,\r\n            filter: item => item.nodeType === 'container' || item.metaData.isElement\r\n                || this.items.some(x => x.udi.uriValue == item.udi),                \r\n            submit: model => {\r\n                model.selection.forEach(value => {\r\n                    value.count = (this.config.existingItemCounts ? this.config.existingItemCounts[value.udi] : 0) ?? 0;\r\n                    value.uniqueId = value.key;\r\n                    value.nodeObjectType = this.type === EntityType.DocumentType ? this.parent.documentTypeKey : this.parent.mediaTypeKey;\r\n\r\n                    this.parent.getIcon(value);\r\n                    this.items.push(value);\r\n                    this.config.contentTypeCounts.push(value);\r\n                });\r\n\r\n                this.parent.editorService.close();\r\n            },\r\n            close: () => this.parent.editorService.close()\r\n        };\r\n\r\n        this.parent.openPicker(this.type, typePickerOptions);\r\n    }\r\n\r\n    removeType = (uniqueId: string) => {\r\n        let idx = this.items.findIndex(x => x.uniqueId === uniqueId);\r\n        this.items.splice(idx, 1);\r\n\r\n        idx = this.config.contentTypeCounts.findIndex(x => x.uniqueId === uniqueId);\r\n        this.config.contentTypeCounts.splice(idx, 1);\r\n    }\r\n}\r\n\r\nconst template = `\r\n    <div class=\"content-type-counts\">\r\n        <div class=\"umb-editor-sub-header justify-start items-center mb0\">\r\n            <h5>\r\n                <localize key=\"{{ $ctrl.headerKey }}\">Type limits</localize>\r\n            </h5>\r\n            <umb-button type=\"button\"\r\n                        button-style=\"outline\"\r\n                        class=\"ml2\"\r\n                        state=\"init\"\r\n                        action=\"$ctrl.addType()\"\r\n                        label-key=\"general_add\">\r\n            </umb-button>\r\n        </div>\r\n\r\n        <div class=\"umb-table\" ng-if=\"$ctrl.items.length\">\r\n            <div class=\"umb-table-head\">\r\n                <div class=\"umb-table-row\">\r\n                    <div class=\"umb-table-cell\">\r\n\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <localize key=\"{{ $ctrl.typeKey }}\">Type</localize>\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <localize key=\"clip_maxItemsOfType\">Max items of type</localize>\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <localize key=\"clip_currentItemsOfType\">Current items of type</localize>\r\n                    </div>\r\n                    <div class=\"umb-table-cell umb-table-cell--small\">\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"umb-table-body\">\r\n                <div ng-repeat=\"type in $ctrl.items track by $index\" class=\"umb-table-row\">\r\n                    <div class=\"umb-table-cell\">\r\n                        <umb-icon icon=\"{{ type.icon }}\" class=\"umb-table-body__icon umb-table-body__fileicon umb-icon\"></umb-icon>\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <div class=\"umb-table-body__link\">{{ type.name }}</div>\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        <input type=\"number\" ng-model=\"type.max\" style=\"margin-bottom:0\" />\r\n                    </div>\r\n                    <div class=\"umb-table-cell\">\r\n                        {{ type.count }}\r\n                    </div>\r\n                    <div class=\"umb-table-cell umb-table-cell--small\">\r\n                        <div class=\"umb-node-preview__actions\">\r\n                            <button type=\"button\"\r\n                                    class=\"umb-node-preview__action umb-node-preview__action--red\"\r\n                                    ng-click=\"$ctrl.removeType(type.uniqueId)\">\r\n                                <localize key=\"general_remove\">Remove</localize>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <umb-empty-state ng-if=\"!$ctrl.items.length\">\r\n            <localize key=\"content_listViewNoItems\">There are no items show in the list.</localize>\r\n        </umb-empty-state>\r\n    </div>`;\r\n\r\nexport const TypeLimitsTableComponent = {\r\n    name: 'typeLimitsTable',\r\n    transclude: true,\r\n    require: {\r\n        parent: '^clipOverview',\r\n    },\r\n    bindings: {\r\n        headerKey: '@',\r\n        typeKey: '@',\r\n        type: '@',\r\n        config: '=',\r\n    },\r\n    template,\r\n    controller: TypeLimitsTable\r\n};","import { ClipService } from './service';\r\n\r\nexport const ServicesModule = angular\r\n    .module('clip.services', [])\r\n    .factory(ClipService.serviceName, ClipService)\r\n    .name;","export class ClipService implements IClipService {\r\n\r\n    public static serviceName = 'clipService';\r\n\r\n    constructor(private $http, private umbRequestHelper) {\r\n    }\r\n\r\n    private _request = (method: 'POST' | 'GET', url: string, data?: object) => {\r\n        url = `${Umbraco.Sys.ServerVariables.Clip.configurationApiBaseUrl}${url}`;\r\n\r\n        return this.umbRequestHelper.resourcePromise(\r\n            method === 'POST' ? this.$http.post(url, data)\r\n                : this.$http.get(url),\r\n            'Something broke'\r\n        );\r\n    }\r\n\r\n    save = (config: IClipConfigModel) => this._request('POST', 'Save', config);\r\n\r\n    get = () => this._request('GET', 'Get');\r\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}